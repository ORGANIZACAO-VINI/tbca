#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Utilit√°rios para configura√ß√£o e manuten√ß√£o do ambiente Oracle
"""

import json
import os
import sys
from pathlib import Path

def create_oracle_config():
    """Cria um arquivo de configura√ß√£o Oracle interativo"""
    print("=== Configura√ß√£o Interativa do Oracle ===")
    
    config = {}
    
    # Informa√ß√µes b√°sicas de conex√£o
    print("\n1. Informa√ß√µes de Conex√£o:")
    config['ORACLE_HOST'] = input("Host do Oracle (padr√£o: localhost): ").strip() or "localhost"
    config['ORACLE_PORT'] = input("Porta do Oracle (padr√£o: 1521): ").strip() or "1521"
    config['ORACLE_SERVICE'] = input("Service Name (padr√£o: XEPDB1): ").strip() or "XEPDB1"
    config['ORACLE_USER'] = input("Usu√°rio do Oracle: ").strip()
    
    if not config['ORACLE_USER']:
        print("‚ùå Usu√°rio √© obrigat√≥rio!")
        return False
    
    config['ORACLE_PASSWORD'] = input("Senha do Oracle: ").strip()
    
    if not config['ORACLE_PASSWORD']:
        print("‚ùå Senha √© obrigat√≥ria!")
        return False
    
    # Configura√ß√µes avan√ßadas
    print("\n2. Configura√ß√µes Avan√ßadas:")
    config['ORACLE_TABLESPACE'] = input("Tablespace (padr√£o: USERS): ").strip() or "USERS"
    config['ORACLE_TEMP_TABLESPACE'] = input("Temp Tablespace (padr√£o: TEMP): ").strip() or "TEMP"
    
    # Pool de conex√µes
    print("\n3. Pool de Conex√µes:")
    min_conn = input("M√≠nimo de conex√µes (padr√£o: 2): ").strip()
    max_conn = input("M√°ximo de conex√µes (padr√£o: 10): ").strip()
    increment = input("Incremento de conex√µes (padr√£o: 1): ").strip()
    
    config['CONNECTION_POOL'] = {
        "min_connections": int(min_conn) if min_conn else 2,
        "max_connections": int(max_conn) if max_conn else 10,
        "increment": int(increment) if increment else 1
    }
    
    # Performance
    iterations = input("Itera√ß√µes padr√£o para testes (padr√£o: 5): ").strip()
    concurrency = input("M√°xima concorr√™ncia para testes (padr√£o: 20): ").strip()
    
    config['PERFORMANCE'] = {
        "default_iterations": int(iterations) if iterations else 5,
        "max_concurrency": int(concurrency) if concurrency else 20
    }
    
    # Logging
    config['LOGGING'] = {
        "level": "INFO",
        "enable_performance_logs": True,
        "enable_detailed_errors": True
    }
    
    # Salvar configura√ß√£o
    config_dir = Path(__file__).parent.parent / "config"
    config_dir.mkdir(exist_ok=True)
    
    config_file = config_dir / "oracle_config.json"
    
    try:
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=4, ensure_ascii=False)
        
        print(f"\n‚úÖ Configura√ß√£o salva em: {config_file}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar configura√ß√£o: {str(e)}")
        return False

def validate_oracle_config(config_path=None):
    """Valida arquivo de configura√ß√£o Oracle"""
    if not config_path:
        config_path = Path(__file__).parent.parent / "config" / "oracle_config.json"
    
    if not Path(config_path).exists():
        print(f"‚ùå Arquivo de configura√ß√£o n√£o encontrado: {config_path}")
        return False
    
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        required_fields = ['ORACLE_USER', 'ORACLE_PASSWORD', 'ORACLE_HOST', 
                          'ORACLE_PORT', 'ORACLE_SERVICE']
        
        missing_fields = [field for field in required_fields if field not in config or not config[field]]
        
        if missing_fields:
            print(f"‚ùå Campos obrigat√≥rios ausentes: {', '.join(missing_fields)}")
            return False
        
        print("‚úÖ Configura√ß√£o v√°lida!")
        return True
        
    except json.JSONDecodeError as e:
        print(f"‚ùå JSON inv√°lido: {str(e)}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao validar configura√ß√£o: {str(e)}")
        return False

def backup_oracle_config():
    """Cria backup da configura√ß√£o atual"""
    config_file = Path(__file__).parent.parent / "config" / "oracle_config.json"
    
    if not config_file.exists():
        print("‚ùå Nenhuma configura√ß√£o para fazer backup!")
        return False
    
    from datetime import datetime
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = config_file.parent / f"oracle_config_backup_{timestamp}.json"
    
    try:
        import shutil
        shutil.copy2(config_file, backup_file)
        print(f"‚úÖ Backup criado: {backup_file}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar backup: {str(e)}")
        return False

def list_oracle_configs():
    """Lista todas as configura√ß√µes Oracle dispon√≠veis"""
    config_dir = Path(__file__).parent.parent / "config"
    
    if not config_dir.exists():
        print("‚ùå Diret√≥rio de configura√ß√£o n√£o existe!")
        return
    
    configs = list(config_dir.glob("oracle_config*.json"))
    
    if not configs:
        print("‚ùå Nenhuma configura√ß√£o Oracle encontrada!")
        return
    
    print("üìÅ Configura√ß√µes Oracle encontradas:")
    for i, config_file in enumerate(configs, 1):
        size = config_file.stat().st_size
        modified = config_file.stat().st_mtime
        from datetime import datetime
        mod_time = datetime.fromtimestamp(modified).strftime("%Y-%m-%d %H:%M:%S")
        print(f"  {i}. {config_file.name} ({size} bytes, modificado: {mod_time})")

def main():
    import argparse
    
    parser = argparse.ArgumentParser(description='Utilit√°rios de configura√ß√£o Oracle')
    parser.add_argument('action', choices=['create', 'validate', 'backup', 'list'], 
                       help='A√ß√£o a executar')
    parser.add_argument('--config', help='Caminho para arquivo de configura√ß√£o')
    
    args = parser.parse_args()
    
    if args.action == 'create':
        success = create_oracle_config()
        sys.exit(0 if success else 1)
    elif args.action == 'validate':
        success = validate_oracle_config(args.config)
        sys.exit(0 if success else 1)
    elif args.action == 'backup':
        success = backup_oracle_config()
        sys.exit(0 if success else 1)
    elif args.action == 'list':
        list_oracle_configs()
        sys.exit(0)

if __name__ == "__main__":
    main()
