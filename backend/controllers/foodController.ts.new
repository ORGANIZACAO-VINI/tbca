import { Request, Response, Router } from "express";
import asyncHandler from "express-async-handler";
// import Food from "../models/foodModel";

// Dados de exemplo para usar sem MongoDB
const dadosExemplo = [
    {
        codigo: "1",
        nome: "Arroz",
        nomeIngles: "Rice",
        nomeCientifico: "Oryza sativa",
        grupo: "Cereais",
        marca: "Marca A"
    },
    {
        codigo: "2",
        nome: "Feijão",
        nomeIngles: "Beans",
        nomeCientifico: "Phaseolus vulgaris",
        grupo: "Leguminosas",
        marca: "Marca B"
    },
    {
        codigo: "3",
        nome: "Tomate",
        nomeIngles: "Tomato",
        nomeCientifico: "Solanum lycopersicum",
        grupo: "Verduras",
        marca: "Marca C"
    }
];

const getApi = asyncHandler(async (req: Request, res: Response) => {
    res.json("API funcionando");
});

// @desc Recebe os dados de um conjunto de alimentos, de 100 em 100
// @route GET /api/alimentos/
// @access Publico
const getFoods = asyncHandler(async (req: Request, res: Response) => {
    const pagina: number = Number(req.query.pagina) || 1;
    
    // Usando dados de exemplo em vez do MongoDB
    console.log("Requisição recebida para /api/alimentos");
    res.json(dadosExemplo);
});

// @desc Retorna os dados completos de um alimento específico
// @router GET /api/alimento/
// @access Publico
const getFood = asyncHandler(async (req: Request, res: Response) => {
    // Usando dados de exemplo em vez do MongoDB
    const alimento = dadosExemplo.find(a => a.codigo === req.params.codigo);
    
    if (!alimento) {
        res.status(404);
        throw new Error("Alimento não encontrado");
    }
    res.json(alimento);
});

const getFoodByNameSearch = asyncHandler(
    async (req: Request, res: Response) => {
        const query: any = req.query.q;
        
        // Usando dados de exemplo em vez do MongoDB
        // Filtra alimentos que contêm o termo de pesquisa no nome
        let resultados: any[] = [];
        
        if (typeof query === 'string') {
            resultados = dadosExemplo.filter(a => 
                a.nome.toLowerCase().includes(query.toLowerCase()) || 
                a.nomeIngles.toLowerCase().includes(query.toLowerCase())
            );
        }
        
        // Adiciona a contagem total de resultados no final do array de objetos
        resultados.push({ totalCount: resultados.length });
        res.status(200).json(resultados);
    }
);

export { getFood, getFoods, getFoodByNameSearch, getApi };

/* Versão com MongoDB (desativada)
const getFood = asyncHandler(async (req: Request, res: Response) => {
    const food = await Food.findOne(
        { codigo: req.params.codigo },
        { addresses: { $slice: [0, 1] }, _id: false } // ou então tira, pois é irrelevante
    );
    if (!food) {
        res.status(404);
        throw new Error("Alimento não encontrado");
    }
    res.json(food);
});

const getFoodByNameSearch = asyncHandler(
    async (req: Request, res: Response) => {
        const query: any = req.query.q;
        const pagina: number = Number(req.query.pagina) || 1;

        // constroi a string de query, depois manda a string toda pra dentro do `` no text search do mongodb
        let mongoQuery: string = "";
        if (Array.isArray(query)) {
            for (let i = 0; i < query.length; i++) {
                mongoQuery += `"${query[i]}"`;
                if (i < query.length - 1) {
                    mongoQuery += `,`;
                }
            }
        } else {
            mongoQuery = `"${query}"`;
        }

        // Busca os alimentos no banco de dados
        const food = await Food.find({
            $text: {
                $search: `${mongoQuery}`,
            },
        })
            .limit(100)
            .skip((pagina - 1) * 100);

        // Query adicional só para buscar o total de alimentos, para fins de paginação
        const count = await Food.find({
            $text: {
                $search: `${mongoQuery}`,
            },
        }).count();

        // debug, remover
        if (food.length === 0) {
            res.json({ message: "kek" });
        }

        // Mapeia o resultado para um objeto json bonitão
        const result = food.map((obj: any) => {
            let rObj = {};
            rObj = {
                codigo: obj.codigo,
                nome: obj.nome,
                nomeIngles: obj.nomeIngles,
                nomeCientifico: obj.nomeCientifico,
                grupo: obj.grupo,
                marca: obj.marca,
            };
            return rObj;
        });

        // Adiciona a contagem total de resultados no final do array de objetos
        result.push({ totalCount: count });
        res.status(200).json(result);
    }
);
*/
