#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu de Importa√ß√£o da Base TBCA Completa
"""

import os
import sys
import subprocess
from datetime import datetime

def mostrar_cabecalho():
    """Mostra cabe√ßalho do menu"""
    print("\n" + "=" * 70)
    print("üçé SISTEMA DE IMPORTA√á√ÉO DA BASE TBCA COMPLETA")
    print("=" * 70)
    print("\nData: " + datetime.now().strftime("%d/%m/%Y %H:%M:%S"))
    
def mostrar_menu():
    """Mostra menu principal"""
    print("\n" + "-" * 50)
    print("üìã MENU PRINCIPAL")
    print("-" * 50)
    print("1. üì• Importar Tabela Completa (CSV ‚Üí SQLite)")
    print("2. üîç Verificar Dados Importados (Simples)")
    print("3. üìä Verificar Dados Importados (Avan√ßado)")
    print("4. üóÑÔ∏è Migrar Dados para Oracle")
    print("5. üßπ Limpar Banco de Dados Atual")
    print("6. üìö Informa√ß√µes sobre o Formato CSV")
    print("0. üö™ Sair")
    print("-" * 50)

def mostrar_info_csv():
    """Mostra informa√ß√µes sobre o formato do CSV"""
    print("\n" + "=" * 70)
    print("üìö INFORMA√á√ïES SOBRE O FORMATO CSV")
    print("=" * 70)
    
    print("\nüî∏ ESTRUTURA DO ARQUIVO:")
    print("O arquivo 'composicao_todos_alimentos.csv' cont√©m dados da Tabela")
    print("Brasileira de Composi√ß√£o de Alimentos (TBCA) com mais de 230.000 linhas.")
    
    print("\nüî∏ FORMATO:")
    print("‚Ä¢ Cada linha cont√©m um componente/nutriente para um alimento espec√≠fico")
    print("‚Ä¢ M√∫ltiplas linhas podem se referir ao mesmo alimento (diferentes nutrientes)")
    print("‚Ä¢ Cont√©m valores para por√ß√µes al√©m dos valores padr√£o por 100g")
    
    print("\nüî∏ COLUNAS PRINCIPAIS:")
    print("‚Ä¢ componente: Nome do nutriente/componente")
    print("‚Ä¢ unidade: Unidade de medida (g, mg, kcal, etc.)")
    print("‚Ä¢ Valor por 100g: Quantidade do nutriente por 100g")
    print("‚Ä¢ codigo_alimento: C√≥digo √∫nico do alimento (ex: BRC0001C)")
    print("‚Ä¢ nome_alimento: Nome do alimento")
    print("‚Ä¢ Demais colunas: Valores para diferentes medidas caseiras")
    
    print("\nüî∏ PROCESSO DE IMPORTA√á√ÉO:")
    print("1. Leitura e normaliza√ß√£o dos dados CSV")
    print("2. Identifica√ß√£o de alimentos √∫nicos por c√≥digo")
    print("3. Extra√ß√£o dos nutrientes principais")
    print("4. Organiza√ß√£o em alimentos e componentes")
    print("5. Inser√ß√£o no banco SQLite")
    
    print("\nüî∏ BANCO DE DADOS:")
    print("‚Ä¢ alimentos: Dados b√°sicos dos alimentos")
    print("‚Ä¢ nutrientes: Nutrientes principais (kcal, prote√≠nas, etc.)")
    print("‚Ä¢ alimentos_composicao: Composi√ß√£o detalhada com todas as medidas")
    
def executar_opcao(opcao):
    """Executa a op√ß√£o escolhida"""
    python_exe = sys.executable
    
    if opcao == "1":
        print("\nüîÑ Executando importa√ß√£o da tabela completa...")
        subprocess.run([python_exe, "importar_tbca_completo.py"])
        
    elif opcao == "2":
        print("\nüîç Verificando dados (simples)...")
        subprocess.run([python_exe, "check_database.py"])
        
    elif opcao == "3":
        print("\nüìä Verificando dados (avan√ßado)...")
        subprocess.run([python_exe, "check_database_avancado.py"])
        
    elif opcao == "4":
        print("\nüóÑÔ∏è Migrando dados para Oracle...")
        
        # Verificar se o script existe
        if os.path.exists("scripts/migrate_sqlite_to_oracle.py"):
            subprocess.run([python_exe, "scripts/migrate_sqlite_to_oracle.py"])
        else:
            print("‚ùå Script de migra√ß√£o n√£o encontrado: scripts/migrate_sqlite_to_oracle.py")
        
    elif opcao == "5":
        print("\nüßπ Limpando banco de dados...")
        
        confirmacao = input("‚ö†Ô∏è ATEN√á√ÉO: Isso ir√° apagar TODOS os dados! Confirmar? (s/n): ").strip().lower()
        if confirmacao in ['s', 'sim', 'y', 'yes']:
            try:
                import sqlite3
                conn = sqlite3.connect("nutri-app/backend/tbca.db")
                cursor = conn.cursor()
                
                cursor.execute("DELETE FROM nutrientes")
                cursor.execute("DELETE FROM alimentos")
                cursor.execute("DELETE FROM grupos")
                cursor.execute("DELETE FROM categorias")
                
                # Verificar se existe a tabela de composi√ß√£o
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='alimentos_composicao'")
                if cursor.fetchone():
                    cursor.execute("DELETE FROM alimentos_composicao")
                
                conn.commit()
                conn.close()
                
                print("‚úÖ Banco de dados limpo com sucesso!")
            except Exception as e:
                print(f"‚ùå Erro ao limpar banco: {e}")
        else:
            print("‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio.")
        
    elif opcao == "6":
        mostrar_info_csv()
        
    elif opcao == "0":
        print("\nüëã Saindo...")
        return False
        
    else:
        print("‚ùå Op√ß√£o inv√°lida!")
    
    return True

def verificar_pre_requisitos():
    """Verifica pr√©-requisitos antes de executar"""
    
    # Verificar se o arquivo CSV existe
    if not os.path.exists("composicao_todos_alimentos.csv"):
        print("‚ö†Ô∏è Arquivo 'composicao_todos_alimentos.csv' n√£o encontrado no diret√≥rio atual.")
        print("‚ÑπÔ∏è Certifique-se de que o arquivo esteja na raiz do projeto.")
        print("   Caminho esperado: " + os.path.abspath("composicao_todos_alimentos.csv"))
        return False
    
    # Verificar se o banco existe
    if not os.path.exists("nutri-app/backend/tbca.db"):
        print("‚ö†Ô∏è Banco de dados 'tbca.db' n√£o encontrado.")
        print("‚ÑπÔ∏è Certifique-se de que o banco exista em nutri-app/backend/")
        return False
    
    # Verificar depend√™ncias Python
    try:
        import pandas
        import sqlite3
    except ImportError as e:
        print(f"‚ö†Ô∏è Depend√™ncia n√£o encontrada: {e}")
        print("‚ÑπÔ∏è Execute: pip install pandas")
        return False
    
    return True

def main():
    """Fun√ß√£o principal"""
    
    mostrar_cabecalho()
    
    # Verificar pr√©-requisitos
    if not verificar_pre_requisitos():
        print("\n‚ùå Pr√©-requisitos n√£o atendidos. Corrija os erros e tente novamente.")
        return
    
    # Mostrar estat√≠sticas do arquivo
    try:
        tamanho_mb = os.path.getsize("composicao_todos_alimentos.csv") / (1024 * 1024)
        num_linhas = sum(1 for _ in open("composicao_todos_alimentos.csv", 'r', encoding='utf-8'))
        
        print("\nüìä INFORMA√á√ïES DO ARQUIVO:")
        print(f"   ‚Ä¢ Arquivo: composicao_todos_alimentos.csv")
        print(f"   ‚Ä¢ Tamanho: {tamanho_mb:.2f} MB")
        print(f"   ‚Ä¢ Linhas: {num_linhas:,}".replace(',', '.'))
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao ler estat√≠sticas do arquivo: {e}")
    
    # Loop principal
    while True:
        mostrar_menu()
        
        opcao = input("\n‚û§ Digite sua op√ß√£o (0-6): ").strip()
        
        if not executar_opcao(opcao):
            break
        
        if opcao != "0":
            input("\n‚èé Pressione Enter para continuar...")

if __name__ == "__main__":
    main()
